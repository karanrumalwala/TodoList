{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/Addtodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","curser","float","Todos","todos","map","key","Header","headerStyle","linkStyle","to","textAlign","Addtodo","state","e","setState","target","value","onSubmit","preventDefault","addTodo","display","name","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3cfb0ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle=()=>{\r\n        return{\r\n            background : '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration : this.props.todo.completed ? \r\n            'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id,title }= this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type='checkbox' \r\n                    onChange={this.props.markComplete.bind(this,id)} /> {' '}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this,id)} \r\n                    style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n///Proptpe\r\nTodoItem.propTypes= {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'2px 5px',\r\n    borderRadius: '50%',\r\n    curser:'pointer',\r\n    float:'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render(){\r\n  return this.props.todos.map((todo)=>(\r\n      <TodoItem key={todo.id} \r\n      todo={todo} \r\n      markComplete={this.props.markComplete}\r\n      delTodo = {this.props.delTodo}\r\n      />\r\n  ));\r\n  }\r\n}\r\n\r\n///PropTypes\r\nTodos.propTypes ={\r\n    todos : PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style= {headerStyle}>\r\n            <h1> TodoList </h1>\r\n            <Link style={linkStyle} to= '/'>HOME</Link> | <Link style={linkStyle} to= '/about'>ABOUT</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\n const headerStyle={\r\n     background:'#333',\r\n     color:'#fff',\r\n     textAlign:'center',\r\n     padding:'10px'\r\n }\r\n\r\n const linkStyle={\r\n     color:'#fff',\r\n     textDecoration:'none'\r\n }","import React, { Component } from 'react'\r\n\r\nexport class Addtodo extends Component {\r\n    state ={\r\n        title:''\r\n    }\r\n    \r\n    onChange=(e)=>this.setState({ title: e.target.value});\r\n    \r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title:''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display:'flex' }}>\r\n                <input \r\n                    type='text' \r\n                    name='title' \r\n                    placeholder='AddTodo'\r\n                    style={{ flex:'10', padding:'5px' }}\r\n                    value= {this.state.title}\r\n                    onChange={this.onChange}\r\n                    />\r\n                <input \r\n                type='submit' \r\n                value='Submit'\r\n                className='btn'\r\n                style={{flex:'1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Addtodo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p> this is ksafjjfsnafjasfjasnfjd</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport Addtodo from './components/Addtodo';\nimport About from './components/pages/About';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n\n  state={\n    todos: []\n  }\n\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({todos :res.data}))\n  }\n\n  markComplete =(id) =>{\n    this.setState({ todos: this.state.todos.map(todo =>{\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) });\n}\n\ndelTodo =(id) =>{\naxios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n.then(res =>   this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })\n  );\n}\n\naddTodo=(title)=>{\n  axios.post('https://jsonplaceholder.typicode.com/todos',{\n    title:title,\n    completed:false\n  })\n  .then(res =>this.setState({ todos: \n    [...this.state.todos, res.data]}));\n}\n\n  render(){\n    return (\n      <HashRouter>\n      <div className=\"App\">\n        <div className='container'>\n          <Header />\n          <Switch>\n\n          <Route exact path='/' render={props =>(\n            <React.Fragment>\n\n            <Addtodo addTodo={this.addTodo}/>\n            <Todos todos= {this.state.todos} \n              markComplete={this.markComplete}\n              delTodo={this.delTodo}\n            />\n            </React.Fragment>\n          )} />\n          <Route path='/about' component={About} />\n          </Switch>\n        </div>\n      </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}